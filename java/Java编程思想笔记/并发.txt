
--使用Executor(执行器):管理thread,简化并发编程
客户端->执行器->任务执行

ExecutorService es = Executor.newFixThreadPool(5) or (首选)Executor.newCachedThreadPool()

--从任务中产生返回值
ExecutorService es = Executor.newCachedThreadPool();
Future future = es.submit(new callable())
future.get()

--休眠
老方法:Thread.sleep()
新方法:TimeUnit.MILLISECONDS.sleep()

--优先级
设置优先级:Thread.currentThread().setPriority(优先级)
Thread.yield():在不同任务之间产生分布良好的处理机制

将thread中设置为Daemon(后台线程)后,finally中的语句将不会执行

在线程中捕获异常
Thread.UncaughtExceptionHandler.uncaughtException()
Thread t;
t.setUncaughtExceptionHandle(一个Thread.UncaughtExceptionHandler对象)

共享公共资源
序列化访问共享资源方案  互斥量
--synchronized 同步
Brian同步规则:如果你正在写一个变量,它可能接下来将被另一个线程读取,
或者正在读取一个上一次已经被另一个线程写过的变量,那么你必须使用同步,
并且,读写线程都必须用相同的监视器锁同步

将共享域设置未private非常重要,否则synchronized就不能防止其他任务直接访问域,这样就会产生冲突
针对每个类有一把锁

--显示的Lock对象

